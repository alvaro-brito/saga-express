[project]
name = "saga-express"
version = "1.0.0"
description = "SAGA orchestration engine with FastAPI, SQLAlchemy, and Kafka/Redpanda support"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Saga Express Team"}
]
license = {text = "MIT"}
keywords = ["saga", "orchestration", "microservices", "fastapi", "distributed-systems"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    # Web Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "python-multipart>=0.0.12",
    
    # Database
    "sqlalchemy>=2.0.35",
    "alembic>=1.13.3",
    "psycopg2-binary>=2.9.9",
    
    # Data Validation
    "pydantic>=2.9.2",
    "pydantic-settings>=2.6.0",
    
    # YAML Processing
    "pyyaml>=6.0.2",
    
    # HTTP Client
    "httpx>=0.27.2",
    
    # Messaging
    "kafka-python>=2.0.2",
    
    # Utilities
    "python-dateutil>=2.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
]

test = [
    "requests>=2.32.0",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
]

all = [
    "saga-express[dev,test]",
]

[project.urls]
Homepage = "https://github.com/saga-express/saga-express"
Documentation = "https://github.com/saga-express/saga-express/blob/main/DOCUMENTATION.md"
Repository = "https://github.com/saga-express/saga-express"
Issues = "https://github.com/saga-express/saga-express/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "requests>=2.32.0",
]